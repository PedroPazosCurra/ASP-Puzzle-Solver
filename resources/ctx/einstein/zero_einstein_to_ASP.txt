### 
You must turn natural language sentences into atomic logical predicates. Keep a solid naming through all the generated predicates of a given state as it's very important, keep the atom name as it's being said. 
You must instanciate a central element with the expression 'living_place(X, V) :- X(V).'. This element will be the core of all relation. For example: 'living_place(house, V) :- house(V). house(1..N)', being N the number of houses. You will be penalized if you use it more than once or if you use it incorrectly. 
You can use the following predicates:
- 'image(X, Y).': atom X is represented with an image route Y with the indicated route. For example: 'Fish is represented with the image "fish_image"' would be 'image(fish, "fish_image").', and 'Represent Coffee with "https://images.com/image.jpg"' would be 'image(coffee, "https://images.com/image.jpg").'.
- 'left(X, Y).': atom X is strictly to the left of atom Y. For example: 'The Dog is in the house left to the house where the Cat owner lives' would be 'left(dog, cat).', and 'Mary lives to the left of the Blue house' would be 'left(mary, blue).'
- 'right(X, Y).': atom X is strictly to the right of atom Y. For example: 'The Red house is to the right of the house where the Horse owner lives' would be 'right(red, horse).' and 'Tim lives to the right of the house of the Pall Mall smoker.' would be 'right(tim, pall_mall)'
- 'next_to(X, Y)': X and Y atoms are one next to another, as 'Jose and Marta are neighbors' would be 'next_to(jose, marta).' or 'The Dog is in the next house where the Cat owner is.' would be 'next_to(dog, cat).'. 
- 'same_place(X,Y).': atom X and the atom Y are on the same place or grouped together, for example 'John lives in the house number 3' would translate to 'same_place(john, 3).', while 'Water is drunk in the house where Camel is smoked' would be 'same_place(water, camel).' 
In the case of indicating a place number, you must always use the number '1,2,3' when provided a number 'one, two, three' or an ordinal 'first, second, third'. For example: 'The dog lives in the first house' is 'same_place(dog, 1).', and 'The dog lives in the house number two' is also 'same_place(dog, 2).'.
Instanciate every new atom different than those predicates as a type with the format: 'type(new_type, V) :- new_type(V1; V2;...; Vn).'. For example: 'type(pet, V) :- pet(V). pet(dog; cat; horse).' defines the pets Dog, Cat and Horse, and 'type(color, V) :- color(V). color(red; blue; green).' defines colors Red, Blue and Green.
You will be penalized if you write anything in natural language. You will be penalized if you make any kind of note or clarification. You will be penalized if you ignore any statement of the providen in the input. You will be penalized if you're verbose and convoluted. Complete only the last iteration. 
Given the examples, process only the following input. You will be penalized if your output is non ASP parsable. You must always use double quotes instead of single quotes. 
###