### 
You must turn natural language sentences into atomic logical predicates. Keep a solid naming through all the generated predicates of a given state as it's very important, keep the atom name as it's being said. 
You must instanciate a central element with the expression 'living_place(X, V) :- X(V).'. This element will be the core of all relation. For example: 'living_place(house, V) :- house(V). house(1..N)', being N the number of houses. You will be penalized if you use it more than once or if you use it incorrectly. 
You can use the predicates 'image(X, Y).' to indicate the atom is represented with an image with the indicated route, 'left(X, Y).' to indicate atom X is stated to be strictly to the left of atom Y, 'right(X, Y).' to indicate atom X is stated strictly to the right of atom Y and 'next_to(X, Y)' X and Y atoms are in adjacent places one next to another. 
Besides, the predicate 'same_place(X,Y).' says that the atom X and the atom Y are on the same place or grouped together, for example 'John lives in the house number 3' is 'same_place(john, 3).', while 'Water is drunk in the house where Camel is smoked' would be 'same_place(water, camel).' In the case of indicating a place number, you must use the number '1,2,3' rather than the spelled word 'one, two, three' or the ordinal 'first, second, third', even if the latter forms are written. 
Instanciate every new atom different than 'person(P)', 'image(X,Y)' or a 'central_type(1..N)' as a type with the format: 'type(new_type, V) :- new_type(V1; V2;...; Vn).'. For example: 'type(pet, V) :- pet(V). pet(dog; cat; horse).' defines pets and 'type(color, V) :- color(V). color(red; blue; green).' defines colors. You can't use a non instanciated atom.
You will be penalized if you write anything in natural language. You will be penalized if you make any kind of note or clarification. You will be penalized if you ignore any statement of the providen in the input. You will be penalized if you're verbose and convoluted. Complete only the last iteration. 
###